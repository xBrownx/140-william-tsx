import * as React from 'react';import { useEffect, MutableRefObject } from 'react';import videojs from 'video.js';import { designAssets as ASSETS } from '@/assets';import Video from '@/components/ui/video/video';import DesktopVideoMenu from '@/features/design/components/desktop-video-menu';import { MobileVideoMenu } from '@/features/design/components/mobile-video-menu';import { useDesignContext } from '@/features/design/context/design-context';import { cn } from '@/utils/cn';const videos = ASSETS.vid;type VideoKey = keyof typeof videos;import 'video.js/dist/video-js.css';type Player = typeof videojs;const VidPlayer: React.FC = () => {    const videoRef = React.useRef<any>(null);    const playerRef: MutableRefObject<any> = React.useRef<Player>(null);    const { activeSource } = useDesignContext();    React.useEffect(() => {        const configuredOptions = {            autoplay: true,            controls: true,            loop: true,            muted: true,            fluid: true,            responsive: true,            height: '100%',            width: '100%',            preload: 'auto',            enableSmoothSeeking: true,            sources: [                {                    src: videos[activeSource as VideoKey].src,                    type: 'application/x-mpegURL',                },            ],        };        if (!playerRef.current) {            // The Video.js player needs to be _inside_ the component el for React 18 Strict Mode.            const videoElement = document.createElement('video-js');            videoElement.classList.add('vjs-big-play-centered');            videoElement.classList.add('flex');            videoElement.classList.add('!w-full');            videoElement.classList.add('!h-full');            videoElement.classList.add('object-cover');            videoElement.classList.add('relative');            videoRef.current.appendChild(videoElement);            const player = (playerRef.current = videojs(                videoElement,                configuredOptions,            ));            // You could update an existing player in the `else` block here            // on prop change, for example:        } else {            const player = playerRef.current;            player.autoplay(configuredOptions.autoplay);            player.src(configuredOptions.sources);        }    }, [activeSource, videoRef]);    // Dispose the Video.js player when the functional component unmounts    React.useEffect(() => {        const player = playerRef.current;        return () => {            if (player && !player.isDisposed()) {                player.dispose();                playerRef.current = null;            }        };    }, [playerRef]);    return (        <div            data-vjs-player            className="size-full overflow-hidden bg-black object-cover [&_img]:size-full [&_img]:!object-cover"        >            <div                ref={videoRef}                className="relative size-full object-cover [&_img]:size-full [&_img]:object-cover [&_video]:object-cover "            ></div>        </div>    );};export const DesignVideo = () => {    const { fade } = useDesignContext();    return (        <div className={cn('bg-black relative')}>            <div                className={cn(                    'transition-all duration-500',                    fade ? 'opacity-0' : 'opacity-1',                )}            >                <VidPlayer />                <MobileVideoMenu />                <DesktopVideoMenu />            </div>        </div>    );};