import * as DrawerPrimitive from '@radix-ui/react-dialog';import React, { useCallback } from 'react';import { headerAssets as ASSETS } from '@/assets';import headerLogo from '@/assets/header-logo.svg';import { Button } from '@/components/ui/button';import {    Drawer,    DrawerContent,    DrawerDescription,    DrawerOverlay,    DrawerTitle,    DrawerTrigger,} from '@/components/ui/drawer';import { Link } from '@/components/ui/link';import { headerConfig, HeaderConfigKey } from '@/config/header-config';import { useAvailabilityContext } from '@/context/availability-context';import { useNavigationContext } from '@/context/navigation-context';import { cn } from '@/utils/cn';const Logo = () => {    const { navigateToPage } = useNavigationContext();    return (        <Link onClick={() => navigateToPage('landing')}>            <img src={headerLogo} alt="business-logo" />        </Link>    );};type NavLinkProps = {    propKey: string;    className?: string;    dismiss?: () => void;};const NavLink: React.FC<NavLinkProps> = ({ propKey }) => {    const { navigateToPage } = useNavigationContext();    return (        <Link            onClick={() => {                navigateToPage(propKey);            }}        >            <span                className={`inline-block bg-nav-gradient bg-nav-size bg-left-bottom bg-no-repeat pb-[2px] font-secondaryRegular text-lg font-normal text-white [transition:background-size_0.5s,_background-position_0s_0.5s] hover:bg-nav-size-hover hover:bg-right-bottom `}            >                {headerConfig[propKey as HeaderConfigKey].text}            </span>        </Link>    );};const MobileNavLink: React.FC<NavLinkProps> = ({    propKey,    className,    dismiss,}) => {    const { navigateToPage } = useNavigationContext();    const onLinkClick = () => {        if (dismiss !== undefined) dismiss();        setTimeout(() => navigateToPage(propKey), 200);    };    return (        <Link onClick={onLinkClick}>            <span                className={cn(                    `inline-block bg-nav-gradient bg-nav-size bg-left-bottom bg-no-repeat pb-[2px] font-secondaryRegular text-4xl font-light text-white [transition:background-size_0.5s,_background-position_0s_0.5s] hover:bg-nav-size-hover hover:bg-right-bottom md:text-lg md:font-normal `,                    className,                )}            >                {headerConfig[propKey as HeaderConfigKey].text}            </span>        </Link>    );};const NavButton: React.FC<NavLinkProps> = ({ propKey }) => {    const { navigateToPage } = useNavigationContext();    return (        <Button            className={cn(                `group m-0 flex self-end justify-end md:justify-center md:self-center items-end md:items-center p-0 relative w-fit overflow-hidden md:rounded-lg md:border md:border-white bg-transparent md:px-6 md:py-2 shadow-none md:after:absolute md:after:inset-x-0 md:after:-top-full md:after:bottom-full md:after:z-[-1] md:after:block md:after:bg-button-primary md:after:px-2 md:after:py-4 md:after:transition-all md:after:duration-300 md:after:content-[''] md:hover:bg-transparent md:hover:after:inset-x-0 md:after:hover:bottom-0 md:hover:after:top-0`,            )}            onClick={() => navigateToPage(propKey)}        >            <p                className={`duration-[0.35s] z-50 m-0 w-full bg-transparent p-0 text-right font-secondaryRegular text-4xl text-white transition-all md:text-lg md:font-normal md:group-hover:text-white`}            >                {headerConfig[propKey as HeaderConfigKey].text}            </p>        </Button>    );};export const MobileMenu = () => {    const [drawerIsOpen, setDrawerIsOpen] = React.useState(false);    return (        <div className="flex flex-col">            <Drawer open={drawerIsOpen}>                <DrawerTitle />                <DrawerTrigger asChild onClick={() => setDrawerIsOpen(true)}>                    <button className="sm:hidden">                        <img                            src={ASSETS.icon['mobile-menu'].src}                            alt="menu-icon"                        />                    </button>                </DrawerTrigger>                <DrawerOverlay onClick={() => setDrawerIsOpen(false)} />                <DrawerContent                    side="top"                    className="bg-background-secondary pt-10 text-white sm:max-w-60"                >                    <DrawerDescription />                    <nav className="grid gap-6 text-lg font-medium">                        <div className="flex w-[190px] items-start">                            <Logo />                        </div>                        <ul className={`flex flex-col items-end gap-4 pt-8`}>                            {Object.keys(headerConfig).map((key) => {                                return (                                    <li key={key}>                                        {headerConfig[key as HeaderConfigKey]                                            .type === 'link' ? (                                            <MobileNavLink                                                propKey={key}                                                dismiss={() =>                                                    setDrawerIsOpen(false)                                                }                                            />                                        ) : (                                            <MobileNavLink                                                propKey={key}                                                dismiss={() =>                                                    setDrawerIsOpen(false)                                                }                                                className={                                                    'pt-[168px] text-[#5178E1]'                                                }                                            />                                        )}                                    </li>                                );                            })}                        </ul>                    </nav>                    <DrawerPrimitive.Close                        className="absolute right-4 top-0 rounded-sm pt-10 opacity-70 ring-offset-background-primary transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary"                        onClick={() => setDrawerIsOpen(false)}                    >                        <img                            src={                                'https://140-william-assets.s3.ap-southeast-2.amazonaws.com/icons/close.svg'                            }                            alt={`close-icon`}                            className="size-4"                        />                        <span className="sr-only">Close</span>                    </DrawerPrimitive.Close>                </DrawerContent>            </Drawer>        </div>    );};export const HeaderLayout: React.FC = () => {    const { isModalOpen } = useAvailabilityContext();    return (        <>            {!isModalOpen && (                <div className="fixed z-40 box-border h-[5.625rem] w-full overflow-hidden px-8">                    <div className="box-border flex size-full flex-row items-center justify-between overflow-hidden">                        <div className={`w-[190px] md:w-auto`}>                            <Logo />                        </div>                        <div className={`flex lg:hidden`}>                            <MobileMenu />                        </div>                        <div className="box-border hidden size-full items-center justify-end lg:flex">                            <ul className={`flex flex-row items-center gap-8`}>                                {Object.keys(headerConfig).map((key) => {                                    return (                                        <li key={key}>                                            {headerConfig[                                                key as HeaderConfigKey                                            ].type === 'link' ? (                                                <NavLink propKey={key} />                                            ) : (                                                <NavButton propKey={key} />                                            )}                                        </li>                                    );                                })}                            </ul>                        </div>                    </div>                </div>            )}        </>    );};