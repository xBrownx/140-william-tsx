import * as React from 'react';type InfiniteScrollProps = {    children: React.ReactNode;};export const InfiniteScroll: React.FC<InfiniteScrollProps> = ({ children }) => {    const [looperInstances, setLooperInstances] = React.useState(1);    const outerRef: React.MutableRefObject<HTMLDivElement | null> =        React.useRef(null);    const innerRef: React.MutableRefObject<HTMLDivElement | null> =        React.useRef(null);    function resetAnimation() {        if (innerRef?.current) {            innerRef.current.setAttribute('data-animate', 'false');            setTimeout(() => {                if (innerRef?.current) {                    innerRef.current.setAttribute('data-animate', 'true');                }            }, 50);        }    }    const setupInstances = React.useCallback(() => {        if (!innerRef?.current || !outerRef?.current) return;        const { width } = innerRef.current.getBoundingClientRect();        const { width: parentWidth } = outerRef.current.getBoundingClientRect();        const instanceWidth = width / innerRef.current.children.length;        if (width < parentWidth + instanceWidth) {            setLooperInstances(                looperInstances + Math.ceil(parentWidth / width),            );        }        resetAnimation();    }, [looperInstances]);    React.useEffect(() => {        setupInstances();    }, []);    React.useEffect(() => {        window.addEventListener('resize', setupInstances);        return () => {            window.removeEventListener('resize', setupInstances);        };    }, []);    return (        <div ref={outerRef} className={`w-full overflow-hidden`}>            <div                className={`[&[data-animate=true]]:animate-infinite-scroll flex w-max animate-none justify-center`}                ref={innerRef}            >                {[...Array(looperInstances)].map((_, ind) => (                    <div key={ind}>{children}</div>                ))}            </div>        </div>    );};